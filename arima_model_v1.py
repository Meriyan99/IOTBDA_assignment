# -*- coding: utf-8 -*-
"""ARIMA_Model_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ldXsK6rfX3M2h-nHLvfDwMz1kCrw7hT

## Step 01 - Get The Data
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

df=pd.read_csv('/content/drive/MyDrive/IOT_PROJECT/GlobalLandTemperaturesByCity.csv')

"""##Step 02 - Exploring The Data Set"""

df.head()

df.tail()

#checking whether how many different cities are there in the data set
df_groupedBy_city = df.groupby('City' , as_index=False).count()
df_groupedBy_city

df_groupedBy_country = df.groupby('Country' , as_index=False).count()
df_groupedBy_country

"""**The data set contains Temperatues of Sri Lanka - Colombo city only**
Therefore we can ignore those two columns for further analysis
"""

df.describe()

"""##Step 03 - Converting the DataFrame to a Time-Series"""

#Drop City  Country and AverageTemperatureUncertainty  Columns
columns_to_be_removed = ['AverageTemperatureUncertainty', 'City', 'Country']
df = df.drop(columns_to_be_removed, axis=1)

df.head()

#Renaming the dt columns
df.columns=["Month","AverageTemperature"]
df.head()

#Converting the Month Column to Date type
df['Month']=pd.to_datetime(df['Month'])

#Converting the df into a time series
df.set_index('Month',inplace=True)
df.head()

#Checking for Null Values
df.isna().sum()

#Removing Null values TODO - Handle null values in a better way
df = df.dropna()

len(df) #105  rows have been removed

df.tail()

"""## Step 4: Visualize the Data"""

fig, axes = plt.subplots(nrows=2, ncols=1)

df[:1250].plot(ax=axes[0] , figsize=(35,15))
df[1250:].plot(ax=axes[1] , figsize=(35,15))

"""**Since there are large number of data points to plot, following code will separate them into sub plots and then display them at once**"""

df1 = df[:500]
df2 = df[501:1000]
df3 = df[1001:1500]
df4 = df[1501:2000]
df5 = df[2001:2508]

fig, axes = plt.subplots(nrows=3, ncols=2)
df1.plot(ax=axes[0,0] , figsize=(35,15))
df2.plot(ax=axes[0,1] ,  figsize=(35,15))
df3.plot(ax=axes[1,0] ,  figsize=(35,15))
df4.plot(ax=axes[1,1] ,  figsize=(35,15))
df5.plot(ax=axes[2,0] ,  figsize=(35,15))

"""##Step 05 - testing for the stationarity"""

### Testing For Stationarity
from statsmodels.tsa.stattools import adfuller

test_result=adfuller(df['AverageTemperature'])
test_result

#Ho: It is non stationary
#H1: It is stationary

def adfuller_test(temp):
    result=adfuller(temp)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )
    if result[1] <= 0.05:
        print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary")
    else:
        print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

adfuller_test(df['AverageTemperature'])

"""##Splitting the Data set"""

train_df = df[:2000]
test_df = df[2000:]

from numpy.ma.core import size
from pandas.plotting import autocorrelation_plot
fig, axes = plt.subplots(nrows=2, ncols=2 , figsize=(25,15) )

autocorrelation_plot(df1['AverageTemperature'] , ax=axes[0,0] )
autocorrelation_plot(df2['AverageTemperature'] , ax=axes[0,1])
autocorrelation_plot(df3['AverageTemperature'] , ax=axes[1,0])
autocorrelation_plot(df4['AverageTemperature'] , ax=axes[1,1])

plt.show()

from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

fig = plt.figure(figsize=(12,8))
ax1 = fig.add_subplot(211)
fig = plot_acf(df['AverageTemperature'],lags=50,ax=ax1)

"""#AUTO-ARIMA"""

#! pip install pmdarima

from pmdarima.arima import auto_arima

arima_model =  auto_arima(df,start_p=0, d=1, start_q=0, 
                          max_p=5, max_d=5, max_q=5, start_P=0, 
                          D=1, start_Q=0, max_P=5, max_D=5,
                          max_Q=5, m=12, seasonal=True, 
                          error_action='warn',trace = True,
                          supress_warnings=True,stepwise = True,
                          random_state=20,n_fits = 50 )

arima_model.summary()

#Predictions for the next 12 months
prediction = pd.DataFrame(arima_model.predict(n_periods = 12))
prediction.columns = ['predicted_temp']
prediction

prediction.plot()